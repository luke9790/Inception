version: '3'

services:
  nginx:
    build:
      context: . #indica la directory di partenza da cui cercare i vari file (in questo caso srcs)
      dockerfile: requirements/nginx/Dockerfile
    container_name: nginx
    depends_on: #indica la dipendenza, esegue quindi wp prima di lanciare nginx
      - wordpress
    ports: #apre la porta del network docker su quella relativa della macchina host
      - "443:443"
    networks:
      - inception
    volumes: #monta i volumi virtuali dei container e copia i dati utili.
    # nei primi due copia i dati sulla macchina locale dentro il container (sostuituendo i file presenti)
    # il terzo prende il volume di wp (creato col container di wp) e lo inserisce per poter mantenere le modifiche fatte
      - ./requirements/nginx/conf/:/etc/nginx/http.d/
      - ./requirements/nginx/tools:/etc/nginx/ssl/
      - wp-volume:/var/www/ 
    #var viene usato per le variabili(lib per database, www o html siti, log per registri ecc)
    restart: always

  mariadb:
    build:
      context: .
      dockerfile: requirements/mariadb/Dockerfile
      args: #argomenti per configurare con le nostre variabili il database
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
        DB_ROOT: ${DB_ROOT}
      # name = nome database, user = nome utente, pass = pass utente, root = pass root
      # non importa configurare il nome utente root
    container_name: mariadb
    ports:
      - "3306:3306"
    networks:
      - inception
    restart: always

  wordpress:
    build:
      context: .
      dockerfile: requirements/wordpress/Dockerfile
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
    container_name: wordpress
    depends_on:
      - mariadb
    restart: always
    networks:
      - inception
    volumes:
      - wp-volume:/var/www/
    # ancora una volta montiamo lo stesso volume, per garantirci che i container abbiano accesso agli stessi dati

  redis:
    build:
      context: .
      dockerfile: requirements/bonus/redis/Dockerfile
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - inception
    restart: always
    
  vsftpd:
    build:
      context: .
      dockerfile: requirements/bonus/vsftpd/Dockerfile
      args:
        FTP_USR: ${FTP_USR}
        FTP_PWD: ${FTP_PWD}
    container_name: vsftpd
    ports:
      - "21:21"
    volumes:
      - wp-volume:/var/www/
    networks:
      - inception
    restart: always
    
  adminer:
    build:
      context: .
      dockerfile: requirements/bonus/adminer/Dockerfile
    container_name: adminer
    depends_on:
      - mariadb
    ports:
      - "8080:8080"
    networks:
     - inception
    restart: always
  
  website:
    build:
      context: .
      dockerfile: requirements/bonus/website/Dockerfile
    container_name: website
    ports:
      - "80:80"
    restart: always

  portainer:
    build:
      context: .
      dockerfile: requirements/bonus/portainer/Dockerfile
    container_name: portainer
    ports:
      - "8000:8000"
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - inception
    restart: always
    
volumes: #qua configuriamo i volumi. 
  wp-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/wordpress
  # o (sta per option) e' di tipo bind, cioe' lega il volume alla cartella locale (tiene le modifiche)
  # device indica dove salviamo i volumi sulla macchina locale
  db-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/mariadb
  portainer_data:

networks:
    inception:
        driver: bridge
# definiamo la nostra rete, chiamata inception, che si basa sul sistema bridge
# dove le porte della rete non sono connesse a quelle della macchina locale (per questo le
# apriamo poi noi manualmente). Altri tipi: host, overlay, macvlan, none.